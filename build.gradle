import de.undercouch.gradle.tasks.download.Download

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'de.undercouch.download' version '5.6.0'
}

group = 'com.travelbookingsystem'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	lombokVersion = '1.18.38'
	springCloudVersion = '2025.0.0'
	testContainersVersion = '1.21.3'
	mapstructVersion = '1.6.3'
    lombokMapstructBindingVersion='0.2.0'
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
//	implementation 'org.springframework.retry:spring-retry'

	compileOnly "org.projectlombok:lombok:$lombokVersion"

	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor "org.projectlombok:lombok:$lombokVersion"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
//    we need this dependency to be sure that lombok runs first
//    order of the annotationProcessor matters
//    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation "org.testcontainers:postgresql"

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testCompileOnly "org.projectlombok:lombok:$lombokVersion"

	testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
		mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
	}
}

tasks.named('test') {
    useJUnitPlatform()
}

def checkPropertiesNotEmpty = { String task, def props ->
    if (props.isEmpty()) {
        throw new GradleException("task failed: No -P parameters passed...")
    }
}

def checkProperty = { String task, String prop, def props ->
    if(!props.containsKey(prop) || !project.property(prop).toString()) {
        throw new GradleException("$task failed : $prop is not passed as a parameter...");
    }
}

tasks.named('bootBuildImage').configure {
    doFirst {
        checkPropertiesNotEmpty(name, project.gradle.startParameter.projectProperties)

        def props = project.gradle.startParameter.projectProperties
        checkProperty(name, 'version', props)

        if (project.findProperty("publishImage")?.toBoolean()) {
            ['registryUsername', 'registryToken', 'registryUrl'].each { prop ->
                checkProperty(name, prop, props)
            }
        }
    }

    builder = "docker.io/paketobuildpacks/builder-jammy-base"
    version = project.findProperty("version")
    imageName = "ghcr.io/vasimvahabov/flight-service" + ":" + version
    publish = project.findProperty("publishImage")?.toBoolean() ?: false
    environment = [
            "BP_JVM_VERSION": JavaVersion.current().majorVersion
    ]
    verboseLogging = true

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }

}

tasks.named('bootRun').configure {
//    systemProperty 'application.test-data-enabled', 'true'
}

tasks.register('setupKeycloakTestResources', Download) {
    src 'https://raw.githubusercontent.com/vasimvahabov/travel-booking-system-deployment/main/docker/keycloak/realm/travel-booking-system-realm.json'
    dest file('src/test/resources/keycloak/travel-booking-system-realm.json')

    overwrite true
}

processTestResources.mustRunAfter setupKeycloakTestResources